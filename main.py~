from flask import Flask, request, redirect, render_template
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['DEBUG'] = True
# Note: the connection string after :// contains the following info:
# user:password@server:portNumber/databaseName
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://build-a-blog:ablog@localhost:3306/build-a-blog'
app.config['SQLALCHEMY_ECHO'] = True
db = SQLAlchemy(app)


class Blog(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120))
    blog_title= db.Column(db.String(120))
    body_blog=db.column(db.String(120))
    posted = db.Column(db.Boolean)

    def __init__(self, name,title,body_blog, posted):
        self.name = name
        self.blog_title= blog_title
        self.body_blog= body_blog
        self.posted = False
        
def valid_title(title):
	ct=True
	title_message=[]	
	if len(title)>0:
		return False	
	else:
		title_error="The title can not be empty.Enter a title for your new-post"
		return  False
def valid_body(body):	
	if len(body)>0:
		return True
	return  False
###
@app.route('/newpost')
def success():
   return render_template('blog.html')
   
###
#Prototype of redirect() function is as below −
#Flask.redirect(location, statuscode, response)
#In the above function −
#    location parameter is the URL where response should be redirected.
#	statuscode sent to browser’s header, defaults to 302.
#    response parameter is used to instantiate response.
###

@app.route('/blog')
def showallpost():
	return 

allpost=[] 
errtitle_message=[]
errbody_massage=[]
ids=[]

@app.route('/newpost', methods=['POST', 'GET'])
def newpost():
    if request.method == 'POST':
    	blog_title = request.form['blog_title']
    	blog_body=request.form['blog_body']
    	if len(request.form['blog_title'])>0 and len(request.form['blog_body'])>0:
    		
	        # Create an object of the class Blog 
	        new_blog=Blog(blog_title,blog_body,posted=True) # composants of the blog
	        
	        db.session.add(new_blog) # add new blog to the database
	        
	        db.session.commit() ##confirmation of adding the new post to the database
	        
	        allpost.append(new_blog) ## adding the new blog to the list
	        return redirect('/blog?id-='+id) 
		
	    if valid _title(blog_title)==True:
			title_error=""
			errtitle_message.append(title_error)
		else:
			title_error="The title can not be empty.Enter a title for your new-post"
			errtitle_message.append(title_error)
		if valid_body(blog_body)==True:
			body_error=""
			errbody_message.append(body_error)
		else:
			body_error="It cannot be empty. Enter something!"
			errbody_message.append(body_error)					
    blogs = Blog.query.filter_by(posted=True).all()
    posted_blog = Blog.query.filter_by(posted=True).all()
    idpost=Blog.query.filter(id).all
    return render_template("blog.html",title_error=errtitle_message[0],body_error=errbody_message[0])
@app.route('/blog')
def displayposts():
	form_id = request.args.get(id)
	
		
		

if __name__ == '__main__':
    app.run()